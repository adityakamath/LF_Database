
lfwidobjct.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000362  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000303  00000000  00000000  000003f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f4  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000219  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c6  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000190  00000000  00000000  00000aea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e6       	ldi	r30, 0x62	; 98
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	81 c1       	rjmp	.+770    	; 0x35e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
// defines the clock speed
#include<avr/io.h>
#include<util/delay.h>

int main(void)
{
  5e:	2f 92       	push	r2
  60:	3f 92       	push	r3
  62:	4f 92       	push	r4
  64:	5f 92       	push	r5
  66:	6f 92       	push	r6
  68:	7f 92       	push	r7
  6a:	8f 92       	push	r8
  6c:	9f 92       	push	r9
  6e:	af 92       	push	r10
  70:	bf 92       	push	r11
  72:	cf 92       	push	r12
  74:	df 92       	push	r13
  76:	ef 92       	push	r14
  78:	ff 92       	push	r15
  7a:	0f 93       	push	r16
  7c:	1f 93       	push	r17
  7e:	df 93       	push	r29
  80:	cf 93       	push	r28
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	2c 97       	sbiw	r28, 0x0c	; 12
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	cd bf       	out	0x3d, r28	; 61
DDRB=0b11111111; //PORTB as output Port connected to motors
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
DDRC=0b0000000; //PORTC Input port connected to Sensors
  96:	14 ba       	out	0x14, r1	; 20
  98:	1a 86       	std	Y+10, r1	; 0x0a
  9a:	19 86       	std	Y+9, r1	; 0x09
  9c:	18 86       	std	Y+8, r1	; 0x08
  9e:	1f 82       	std	Y+7, r1	; 0x07
  a0:	1e 82       	std	Y+6, r1	; 0x06
  a2:	1d 82       	std	Y+5, r1	; 0x05
  a4:	1c 82       	std	Y+4, r1	; 0x04
  a6:	1b 82       	std	Y+3, r1	; 0x03
  a8:	22 24       	eor	r2, r2
  aa:	33 24       	eor	r3, r3
  ac:	44 24       	eor	r4, r4
  ae:	55 24       	eor	r5, r5
  b0:	66 24       	eor	r6, r6
  b2:	77 24       	eor	r7, r7
  b4:	88 24       	eor	r8, r8
  b6:	99 24       	eor	r9, r9
  b8:	aa 24       	eor	r10, r10
  ba:	bb 24       	eor	r11, r11
  bc:	cc 24       	eor	r12, r12
  be:	dd 24       	eor	r13, r13
  c0:	ee 24       	eor	r14, r14
  c2:	ff 24       	eor	r15, r15
  c4:	00 e0       	ldi	r16, 0x00	; 0
  c6:	10 e0       	ldi	r17, 0x00	; 0
  c8:	1c 86       	std	Y+12, r1	; 0x0c
  ca:	1b 86       	std	Y+11, r1	; 0x0b
  cc:	a0 e0       	ldi	r26, 0x00	; 0
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	1a 82       	std	Y+2, r1	; 0x02
  d2:	19 82       	std	Y+1, r1	; 0x01
int count=0;
int c2=0,c3=0,c4=0,c5=0,c6=0,c7=0,c8=0,c9=0,c10=0,c11=0,c12=0,c13=0,c14=0,c15=0;

while(1) // infinite loop
{
     left_sensor=PINC&0b0010000; // mask PC4 bit of Port C
  d4:	83 b3       	in	r24, 0x13	; 19
  d6:	90 e0       	ldi	r25, 0x00	; 0
     right_sensor=PINC&0b0100000;// mask PC5 bit of Port C
  d8:	23 b3       	in	r18, 0x13	; 19
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	20 72       	andi	r18, 0x20	; 32
  de:	30 70       	andi	r19, 0x00	; 0
	 
	
	if((left_sensor==0b0000000) & (right_sensor==0b0000000) ) //if both sensors "off"
  e0:	bc 01       	movw	r22, r24
  e2:	60 71       	andi	r22, 0x10	; 16
  e4:	70 70       	andi	r23, 0x00	; 0
  e6:	84 fd       	sbrc	r24, 4
  e8:	06 c1       	rjmp	.+524    	; 0x2f6 <main+0x298>
  ea:	21 15       	cp	r18, r1
  ec:	31 05       	cpc	r19, r1
  ee:	09 f0       	breq	.+2      	; 0xf2 <main+0x94>
  f0:	02 c1       	rjmp	.+516    	; 0x2f6 <main+0x298>
     {
	 //if(count<0x03)

	 
		
	 	if((count==1)&(c2==1)&(c3==1)&(c4==1)&(c5==1)&(c6==1)&(c7==1)&(c8==1)&(c9==1)&(c10==1)&(c11==1)&(c12==1)&(c13==1)&(c14==1)&(c15==1))
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	4b 81       	ldd	r20, Y+3	; 0x03
  f8:	5c 81       	ldd	r21, Y+4	; 0x04
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	51 05       	cpc	r21, r1
  fe:	11 f4       	brne	.+4      	; 0x104 <main+0xa6>
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ed 81       	ldd	r30, Y+5	; 0x05
 10a:	fe 81       	ldd	r31, Y+6	; 0x06
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	11 f4       	brne	.+4      	; 0x114 <main+0xb6>
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	28 23       	and	r18, r24
 116:	39 23       	and	r19, r25
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	f1 e0       	ldi	r31, 0x01	; 1
 11e:	2f 16       	cp	r2, r31
 120:	31 04       	cpc	r3, r1
 122:	11 f4       	brne	.+4      	; 0x128 <main+0xca>
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	28 23       	and	r18, r24
 12a:	39 23       	and	r19, r25
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	44 16       	cp	r4, r20
 134:	51 04       	cpc	r5, r1
 136:	11 f4       	brne	.+4      	; 0x13c <main+0xde>
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	28 23       	and	r18, r24
 13e:	39 23       	and	r19, r25
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	51 e0       	ldi	r21, 0x01	; 1
 146:	65 16       	cp	r6, r21
 148:	71 04       	cpc	r7, r1
 14a:	11 f4       	brne	.+4      	; 0x150 <main+0xf2>
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	28 23       	and	r18, r24
 152:	39 23       	and	r19, r25
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	e1 e0       	ldi	r30, 0x01	; 1
 15a:	8e 16       	cp	r8, r30
 15c:	91 04       	cpc	r9, r1
 15e:	11 f4       	brne	.+4      	; 0x164 <main+0x106>
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	28 23       	and	r18, r24
 166:	39 23       	and	r19, r25
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	f1 e0       	ldi	r31, 0x01	; 1
 16e:	af 16       	cp	r10, r31
 170:	b1 04       	cpc	r11, r1
 172:	11 f4       	brne	.+4      	; 0x178 <main+0x11a>
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	28 23       	and	r18, r24
 17a:	39 23       	and	r19, r25
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	c4 16       	cp	r12, r20
 184:	d1 04       	cpc	r13, r1
 186:	11 f4       	brne	.+4      	; 0x18c <main+0x12e>
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	28 23       	and	r18, r24
 18e:	39 23       	and	r19, r25
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	51 e0       	ldi	r21, 0x01	; 1
 196:	e5 16       	cp	r14, r21
 198:	f1 04       	cpc	r15, r1
 19a:	11 f4       	brne	.+4      	; 0x1a0 <main+0x142>
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	28 23       	and	r18, r24
 1a2:	39 23       	and	r19, r25
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	01 30       	cpi	r16, 0x01	; 1
 1aa:	11 05       	cpc	r17, r1
 1ac:	11 f4       	brne	.+4      	; 0x1b2 <main+0x154>
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	28 23       	and	r18, r24
 1b4:	39 23       	and	r19, r25
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	eb 85       	ldd	r30, Y+11	; 0x0b
 1bc:	fc 85       	ldd	r31, Y+12	; 0x0c
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	11 f4       	brne	.+4      	; 0x1c6 <main+0x168>
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	28 23       	and	r18, r24
 1c8:	39 23       	and	r19, r25
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	a1 30       	cpi	r26, 0x01	; 1
 1d0:	b1 05       	cpc	r27, r1
 1d2:	11 f4       	brne	.+4      	; 0x1d8 <main+0x17a>
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	28 23       	and	r18, r24
 1da:	39 23       	and	r19, r25
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	49 81       	ldd	r20, Y+1	; 0x01
 1e2:	5a 81       	ldd	r21, Y+2	; 0x02
 1e4:	41 30       	cpi	r20, 0x01	; 1
 1e6:	51 05       	cpc	r21, r1
 1e8:	11 f4       	brne	.+4      	; 0x1ee <main+0x190>
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	28 23       	and	r18, r24
 1f0:	39 23       	and	r19, r25
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	e9 85       	ldd	r30, Y+9	; 0x09
 1f6:	fa 85       	ldd	r31, Y+10	; 0x0a
 1f8:	31 97       	sbiw	r30, 0x01	; 1
 1fa:	09 f4       	brne	.+2      	; 0x1fe <main+0x1a0>
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	4f 81       	ldd	r20, Y+7	; 0x07
 202:	58 85       	ldd	r21, Y+8	; 0x08
 204:	41 30       	cpi	r20, 0x01	; 1
 206:	51 05       	cpc	r21, r1
 208:	09 f4       	brne	.+2      	; 0x20c <main+0x1ae>
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	89 23       	and	r24, r25
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	28 23       	and	r18, r24
 212:	39 23       	and	r19, r25
 214:	23 2b       	or	r18, r19
 216:	59 f1       	breq	.+86     	; 0x26e <main+0x210>
	 	{	PORTB=0b00000000;}
 218:	18 ba       	out	0x18, r1	; 24
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	98 87       	std	Y+8, r25	; 0x08
 220:	8f 83       	std	Y+7, r24	; 0x07
 222:	9e 83       	std	Y+6, r25	; 0x06
 224:	8d 83       	std	Y+5, r24	; 0x05
 226:	9c 83       	std	Y+4, r25	; 0x04
 228:	8b 83       	std	Y+3, r24	; 0x03
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	26 2e       	mov	r2, r22
 22e:	31 2c       	mov	r3, r1
 230:	51 e0       	ldi	r21, 0x01	; 1
 232:	45 2e       	mov	r4, r21
 234:	51 2c       	mov	r5, r1
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	64 2e       	mov	r6, r20
 23a:	71 2c       	mov	r7, r1
 23c:	31 e0       	ldi	r19, 0x01	; 1
 23e:	83 2e       	mov	r8, r19
 240:	91 2c       	mov	r9, r1
 242:	21 e0       	ldi	r18, 0x01	; 1
 244:	a2 2e       	mov	r10, r18
 246:	b1 2c       	mov	r11, r1
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	c9 2e       	mov	r12, r25
 24c:	d1 2c       	mov	r13, r1
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	e8 2e       	mov	r14, r24
 252:	f1 2c       	mov	r15, r1
 254:	01 e0       	ldi	r16, 0x01	; 1
 256:	10 e0       	ldi	r17, 0x00	; 0
 258:	1c 87       	std	Y+12, r17	; 0x0c
 25a:	0b 87       	std	Y+11, r16	; 0x0b
 25c:	a1 e0       	ldi	r26, 0x01	; 1
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	ba 83       	std	Y+2, r27	; 0x02
 262:	a9 83       	std	Y+1, r26	; 0x01
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	20 e0       	ldi	r18, 0x00	; 0
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	3a c0       	rjmp	.+116    	; 0x2e2 <main+0x284>
		else
		{
		PORTB=0b00101010; 
 26e:	9a e2       	ldi	r25, 0x2A	; 42
 270:	98 bb       	out	0x18, r25	; 24
 272:	ba 83       	std	Y+2, r27	; 0x02
 274:	a9 83       	std	Y+1, r26	; 0x01
 276:	ab 85       	ldd	r26, Y+11	; 0x0b
 278:	bc 85       	ldd	r27, Y+12	; 0x0c
 27a:	1c 87       	std	Y+12, r17	; 0x0c
 27c:	0b 87       	std	Y+11, r16	; 0x0b
 27e:	87 01       	movw	r16, r14
 280:	76 01       	movw	r14, r12
 282:	65 01       	movw	r12, r10
 284:	54 01       	movw	r10, r8
 286:	43 01       	movw	r8, r6
 288:	32 01       	movw	r6, r4
 28a:	21 01       	movw	r4, r2
 28c:	2b 80       	ldd	r2, Y+3	; 0x03
 28e:	3c 80       	ldd	r3, Y+4	; 0x04
 290:	ed 81       	ldd	r30, Y+5	; 0x05
 292:	fe 81       	ldd	r31, Y+6	; 0x06
 294:	fc 83       	std	Y+4, r31	; 0x04
 296:	eb 83       	std	Y+3, r30	; 0x03
 298:	4f 81       	ldd	r20, Y+7	; 0x07
 29a:	58 85       	ldd	r21, Y+8	; 0x08
 29c:	5e 83       	std	Y+6, r21	; 0x06
 29e:	4d 83       	std	Y+5, r20	; 0x05
 2a0:	89 85       	ldd	r24, Y+9	; 0x09
 2a2:	9a 85       	ldd	r25, Y+10	; 0x0a
 2a4:	98 87       	std	Y+8, r25	; 0x08
 2a6:	8f 83       	std	Y+7, r24	; 0x07
 2a8:	dd cf       	rjmp	.-70     	; 0x264 <main+0x206>
 2aa:	88 e8       	ldi	r24, 0x88	; 136
 2ac:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2ae:	e9 e1       	ldi	r30, 0x19	; 25
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	31 97       	sbiw	r30, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <main+0x254>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b8:	d1 f7       	brne	.-12     	; 0x2ae <main+0x250>
		count=1;

	}
		while((left_sensor==0b0000000) & (right_sensor==0b0000000) )
		{_delay_ms(500);
		PORTB=0b00101010;
 2ba:	9a e2       	ldi	r25, 0x2A	; 42
 2bc:	98 bb       	out	0x18, r25	; 24
 2be:	88 e8       	ldi	r24, 0x88	; 136
 2c0:	93 e1       	ldi	r25, 0x13	; 19
 2c2:	e9 e1       	ldi	r30, 0x19	; 25
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	31 97       	sbiw	r30, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <main+0x268>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2cc:	d1 f7       	brne	.-12     	; 0x2c2 <main+0x264>
		_delay_ms(500);
			left_sensor=PINC&0b0010000; // mask PC4 bit of Port C
 2ce:	83 b3       	in	r24, 0x13	; 19
 2d0:	68 2f       	mov	r22, r24
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	60 71       	andi	r22, 0x10	; 16
 2d6:	70 70       	andi	r23, 0x00	; 0
     		right_sensor=PINC&0b0100000;// mask PC5 bit of Port C
 2d8:	83 b3       	in	r24, 0x13	; 19
 2da:	28 2f       	mov	r18, r24
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	20 72       	andi	r18, 0x20	; 32
 2e0:	30 70       	andi	r19, 0x00	; 0
		c3=c2;
		c2=count;
		count=1;

	}
		while((left_sensor==0b0000000) & (right_sensor==0b0000000) )
 2e2:	61 15       	cp	r22, r1
 2e4:	71 05       	cpc	r23, r1
 2e6:	19 f4       	brne	.+6      	; 0x2ee <main+0x290>
 2e8:	21 15       	cp	r18, r1
 2ea:	31 05       	cpc	r19, r1
 2ec:	f1 f2       	breq	.-68     	; 0x2aa <main+0x24c>
 2ee:	e1 e0       	ldi	r30, 0x01	; 1
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	fa 87       	std	Y+10, r31	; 0x0a
 2f4:	e9 87       	std	Y+9, r30	; 0x09
	


				
	}
          if((left_sensor==0b0010000) & (right_sensor==0b0100000)) //if both sensors "on"
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	60 31       	cpi	r22, 0x10	; 16
 2fa:	71 05       	cpc	r23, r1
 2fc:	09 f4       	brne	.+2      	; 0x300 <main+0x2a2>
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	20 32       	cpi	r18, 0x20	; 32
 304:	31 05       	cpc	r19, r1
 306:	09 f4       	brne	.+2      	; 0x30a <main+0x2ac>
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	99 23       	and	r25, r25
 30c:	b9 f0       	breq	.+46     	; 0x33c <main+0x2de>
 30e:	88 23       	and	r24, r24
 310:	a9 f0       	breq	.+42     	; 0x33c <main+0x2de>
 312:	48 e5       	ldi	r20, 0x58	; 88
 314:	5b e1       	ldi	r21, 0x1B	; 27
 316:	e9 e1       	ldi	r30, 0x19	; 25
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	31 97       	sbiw	r30, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <main+0x2bc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 31e:	41 50       	subi	r20, 0x01	; 1
 320:	50 40       	sbci	r21, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 322:	c9 f7       	brne	.-14     	; 0x316 <main+0x2b8>
              {	 _delay_ms(700);
	 PORTB=0b00000000;
 324:	18 ba       	out	0x18, r1	; 24
 326:	48 eb       	ldi	r20, 0xB8	; 184
 328:	5b e0       	ldi	r21, 0x0B	; 11
 32a:	e9 e1       	ldi	r30, 0x19	; 25
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	31 97       	sbiw	r30, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <main+0x2d0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 332:	41 50       	subi	r20, 0x01	; 1
 334:	50 40       	sbci	r21, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 336:	c9 f7       	brne	.-14     	; 0x32a <main+0x2cc>
	 _delay_ms(300);;
                 PORTB=0b00101010; // move straigh
 338:	fa e2       	ldi	r31, 0x2A	; 42
 33a:	f8 bb       	out	0x18, r31	; 24
               
               }
			if((left_sensor==0b0000000)&(right_sensor==0b0100000))
 33c:	67 2b       	or	r22, r23
 33e:	29 f4       	brne	.+10     	; 0x34a <main+0x2ec>
 340:	88 23       	and	r24, r24
 342:	19 f0       	breq	.+6      	; 0x34a <main+0x2ec>
              {


                 PORTB=0b00000010; // turn left
 344:	42 e0       	ldi	r20, 0x02	; 2
 346:	48 bb       	out	0x18, r20	; 24

PORTB=0b0000010;
 348:	48 bb       	out	0x18, r20	; 24

               }
			                       if((left_sensor==0b0010000)&(right_sensor==0b0000000))
 34a:	99 23       	and	r25, r25
 34c:	09 f4       	brne	.+2      	; 0x350 <main+0x2f2>
 34e:	c2 ce       	rjmp	.-636    	; 0xd4 <main+0x76>
 350:	23 2b       	or	r18, r19
 352:	09 f0       	breq	.+2      	; 0x356 <main+0x2f8>
 354:	bf ce       	rjmp	.-642    	; 0xd4 <main+0x76>
              {
                 PORTB=0b00101000; // turn right
 356:	58 e2       	ldi	r21, 0x28	; 40
 358:	58 bb       	out	0x18, r21	; 24


                 ; // turn left
				PORTB=0b00101000;
 35a:	58 bb       	out	0x18, r21	; 24
 35c:	bb ce       	rjmp	.-650    	; 0xd4 <main+0x76>

0000035e <_exit>:
 35e:	f8 94       	cli

00000360 <__stop_program>:
 360:	ff cf       	rjmp	.-2      	; 0x360 <__stop_program>
