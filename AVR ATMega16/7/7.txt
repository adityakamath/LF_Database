#include<avr/io.h>
#include<util/delay.h>


#define F_CPU 1000000UL

char buffer[5];


int ReadADC(uint8_t ch)
{
   //Select ADC Channel ch must be 0-7
   ch=ch&0b00000111;
   ADMUX|=ch;

   //Start Single conversion
   ADCSRA |= (1<<ADSC);

   //Wait for conversion to complete
   while(!(ADCSRA&(1<<ADIF)));

   //Clear ADIF by writing one to it
   //Note you may be wondering why we have write one to clear it
   //This is standard way of clearing bits in io as said in datasheets.
   //The code writes '1' but it result in setting bit to '0' !!!

   ADCSRA|=(1<<ADIF);

   return(ADC);
}

void initADC()
{
ADMUX=(1<<REFS0);  // For Aref=AVcc;
ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1);//|(1<<ADPS0); //Prescalar div factor =128
}


void wait(float x)
{
for(int i=0;i<(int)(1302*x);i++)
_delay_loop_1(0);
}


void main()
{
	DDRD=0x00;
	DDRB=0xFF;
	
	int x;
	int rs,ls,lc,rc,dir,ol=0;

	while(1)
	{
		initADC();
		x=ReadADC(0);

		if(x>=0)
		{

		rs=PIND&0b00000001;
		rc=PIND&0b00000010;
		ls=PIND&0b00001000;
		lc=PIND&0b00000100;

		if(rs==0x00)
		{
			dir=1;

			if(rs==0x00 && rc==0x00 && lc==0x00 && ls==0x00)
			{

				PORTB=0b00001001;
				while(rs==0b00000001 && ls==0b00001000)
				{
					rs=PIND&0b00000001;
					rc=PIND&0b00000010;
					ls=PIND&0b00001000;
					lc=PIND&0b00000100;
				}

				ol++;
			}

			/*while(rs!=0b00000001 || ls!=0b00001000)
			{
				rs=PIND&0b00000001;
				rc=PIND&0b00000010;
				ls=PIND&0b00001000;
				lc=PIND&0b00000100;
			}
			if(rc==0x00 && lc==0x00)
			{
				ol++;
			}
			*/
			
		}

		if(ls==0x00)
		{
			dir=0;
			
			if(rs==0x00 && rc==0x00 && lc==0x00 && ls==0x00)
			{
				PORTB=0b00001001;
				
				while(rs==0b00000001 && ls==0b00001000)
				{
					rs=PIND&0b00000001;
					rc=PIND&0b00000010;
					ls=PIND&0b00001000;
					lc=PIND&0b00000100;
				}
				ol++;
			}
			/*
			
			while(rs!=0b00000001 || ls!=0b00001000)
			{
				rs=PIND&0b00000001;
				rc=PIND&0b00000010;
				ls=PIND&0b00001000;
				lc=PIND&0b00000100;
			}
			if(rc==0x00 && lc==0x00)
			{
				ol++;
			}
			*/
		}

		if(rs==0b00000001 && ls==0b00001000)
		{
			if(rc==0x00 && lc==0x00)
			{
				PORTB=0b00001001;
			}
			if(rc==0b00000010 && lc==0x00)
			{
				PORTB=0b00000001;
			}
			if(rc==0x00 && lc==0b00000100)
			{
				PORTB=0b00001000;
			}
			if(rc==0b00000010 && lc==0b00000100)
			{
				if(dir==1)
				{	
					PORTB=0b00001010;
				}
				if(dir==0)
				{
					PORTB=0b00000101;
				}
			}
					
		}
		}
		else
		{
		PORTB=0x70;
		}
		if(ol==0)
		{
			PORTB=PORTB|0x00;
		}
		else if(ol==1)
		{
			PORTB=PORTB|0b10000000;
		}
		else if(ol==2)
		{
			PORTB=PORTB|0b01000000;
		}
		else if(ol==3)
		{
			PORTB=PORTB|0b11000000;
		}
		else if(ol==4)
		{
			PORTB=PORTB|0b00100000;
		}
		
	}	
}
