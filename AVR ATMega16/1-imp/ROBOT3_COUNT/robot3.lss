
robot3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000264  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000007f  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000255  00000000  00000000  00000303  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000146  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000364  00000000  00000000  0000069e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f4  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000013  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 97 00 	call	0x12e	; 0x12e <main>
  74:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <InitADC>:
void right(void);
void stop(void);

void InitADC()
{
	ADMUX=(1<<REFS0);                         				// For Aref=AVcc;
  7c:	80 e4       	ldi	r24, 0x40	; 64
  7e:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS1)|(1<<ADPS0); 	//Prescalar div factor =128
  80:	83 e8       	ldi	r24, 0x83	; 131
  82:	86 b9       	out	0x06, r24	; 6
}
  84:	08 95       	ret

00000086 <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
   //Select ADC Channel ch must be 0-7
   //ch=ch&0b00000001;
   ADMUX|=(1<<MUX0)|(1<<MUX1)|(1<<MUX2);
  86:	87 b1       	in	r24, 0x07	; 7
  88:	87 60       	ori	r24, 0x07	; 7
  8a:	87 b9       	out	0x07, r24	; 7
   //ADMUX|=(1<<MUX0);

   //Start Single conversion
   ADCSRA|=(1<<ADSC);
  8c:	36 9a       	sbi	0x06, 6	; 6

   //Wait for conversion to complete
   while(!(ADCSRA && (1<<ADIF)));
  8e:	86 b1       	in	r24, 0x06	; 6
  90:	88 23       	and	r24, r24
  92:	e9 f3       	breq	.-6      	; 0x8e <ReadADC+0x8>
   //Clear ADIF by writing one to it
   //Note you may be wondering why we have write one to clear it
   //This is standard way of clearing bits in io as said in datasheets.
   //The code writes '1' but it result in setting bit to '0' !!!

   ADCSRA|=(1<<ADIF);
  94:	34 9a       	sbi	0x06, 4	; 6

   return(ADC);
  96:	24 b1       	in	r18, 0x04	; 4
  98:	35 b1       	in	r19, 0x05	; 5
}
  9a:	c9 01       	movw	r24, r18
  9c:	08 95       	ret

0000009e <backward>:
}

void backward(void)
{	
	
	cbi(PORTC,3);
  9e:	ab 98       	cbi	0x15, 3	; 21
	sbi(PORTC,2);
  a0:	aa 9a       	sbi	0x15, 2	; 21
	cbi(PORTC,1);
  a2:	a9 98       	cbi	0x15, 1	; 21
	sbi(PORTC,0);
  a4:	a8 9a       	sbi	0x15, 0	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	9e e4       	ldi	r25, 0x4E	; 78
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <backward+0xc>
	_delay_ms(10);
}
  ae:	08 95       	ret

000000b0 <forward>:

void forward(void)
{	
	
	sbi(PORTC,3);
  b0:	ab 9a       	sbi	0x15, 3	; 21
	cbi(PORTC,2);
  b2:	aa 98       	cbi	0x15, 2	; 21
	sbi(PORTC,1);
  b4:	a9 9a       	sbi	0x15, 1	; 21
	cbi(PORTC,0);
  b6:	a8 98       	cbi	0x15, 0	; 21
	//_delay_ms(20);
}
  b8:	08 95       	ret

000000ba <forward1>:

void forward1(void)
{	
	count++;
  ba:	80 91 60 00 	lds	r24, 0x0060
  be:	90 91 61 00 	lds	r25, 0x0061
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	90 93 61 00 	sts	0x0061, r25
  c8:	80 93 60 00 	sts	0x0060, r24
	sbi(PORTC,3);
  cc:	ab 9a       	sbi	0x15, 3	; 21
	cbi(PORTC,2);
  ce:	aa 98       	cbi	0x15, 2	; 21
	sbi(PORTC,1);
  d0:	a9 9a       	sbi	0x15, 1	; 21
	cbi(PORTC,0);
  d2:	a8 98       	cbi	0x15, 0	; 21
  d4:	84 ef       	ldi	r24, 0xF4	; 244
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	28 ec       	ldi	r18, 0xC8	; 200
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	f9 01       	movw	r30, r18
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <forward1+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e4:	d9 f7       	brne	.-10     	; 0xdc <forward1+0x22>
	_delay_ms(50);
}
  e6:	08 95       	ret

000000e8 <right>:

void right(void)
{	
	cbi(PORTC,3);
  e8:	ab 98       	cbi	0x15, 3	; 21
	cbi(PORTC,2);
  ea:	aa 98       	cbi	0x15, 2	; 21
	sbi(PORTC,1);
  ec:	a9 9a       	sbi	0x15, 1	; 21
	cbi(PORTC,0);
  ee:	a8 98       	cbi	0x15, 0	; 21
	if((bit_is_set(PINB,4)&&bit_is_set(PINB,3)&&bit_is_set(PINB,2)&&bit_is_set(PINB,1)&&bit_is_set(PINB,0)))
  f0:	b4 9b       	sbis	0x16, 4	; 22
  f2:	08 c0       	rjmp	.+16     	; 0x104 <right+0x1c>
  f4:	b3 9b       	sbis	0x16, 3	; 22
  f6:	06 c0       	rjmp	.+12     	; 0x104 <right+0x1c>
  f8:	b2 9b       	sbis	0x16, 2	; 22
  fa:	04 c0       	rjmp	.+8      	; 0x104 <right+0x1c>
  fc:	b1 9b       	sbis	0x16, 1	; 22
  fe:	02 c0       	rjmp	.+4      	; 0x104 <right+0x1c>
 100:	b0 99       	sbic	0x16, 0	; 22
 102:	f2 cf       	rjmp	.-28     	; 0xe8 <right>
 104:	08 95       	ret

00000106 <left>:
	//stop();	
}

void left(void)
{
	sbi(PORTC,3);
 106:	ab 9a       	sbi	0x15, 3	; 21
	cbi(PORTC,2);
 108:	aa 98       	cbi	0x15, 2	; 21
	cbi(PORTC,1);
 10a:	a9 98       	cbi	0x15, 1	; 21
	cbi(PORTC,0);
 10c:	a8 98       	cbi	0x15, 0	; 21
	if((bit_is_set(PINB,4)&&bit_is_set(PINB,3)&&bit_is_set(PINB,2)&&bit_is_set(PINB,1)&&bit_is_set(PINB,0)))
 10e:	b4 9b       	sbis	0x16, 4	; 22
 110:	08 c0       	rjmp	.+16     	; 0x122 <left+0x1c>
 112:	b3 9b       	sbis	0x16, 3	; 22
 114:	06 c0       	rjmp	.+12     	; 0x122 <left+0x1c>
 116:	b2 9b       	sbis	0x16, 2	; 22
 118:	04 c0       	rjmp	.+8      	; 0x122 <left+0x1c>
 11a:	b1 9b       	sbis	0x16, 1	; 22
 11c:	02 c0       	rjmp	.+4      	; 0x122 <left+0x1c>
 11e:	b0 99       	sbic	0x16, 0	; 22
 120:	f2 cf       	rjmp	.-28     	; 0x106 <left>
 122:	08 95       	ret

00000124 <stop>:
	//stop();	
}

void stop(void)
{
	cbi(PORTC,3);
 124:	ab 98       	cbi	0x15, 3	; 21
	cbi(PORTC,2);
 126:	aa 98       	cbi	0x15, 2	; 21
	cbi(PORTC,1);
 128:	a9 98       	cbi	0x15, 1	; 21
	cbi(PORTC,0);
 12a:	a8 98       	cbi	0x15, 0	; 21
	//_delay_ms(20);
 12c:	08 95       	ret

0000012e <main>:
}
int count=0;
int main()
{
	
	DDRA=0x0F;
 12e:	8f e0       	ldi	r24, 0x0F	; 15
 130:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
 132:	1b ba       	out	0x1b, r1	; 27
	DDRB=0x00;
 134:	17 ba       	out	0x17, r1	; 23
	PORTB=0xFF;
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	88 bb       	out	0x18, r24	; 24
	DDRC=0xFF;
 13a:	84 bb       	out	0x14, r24	; 20
	DDRD=0XFF;
 13c:	81 bb       	out	0x11, r24	; 17
	sbi(PORTD,4);
 13e:	94 9a       	sbi	0x12, 4	; 18
	sbi(PORTD,5);
 140:	95 9a       	sbi	0x12, 5	; 18
void right(void);
void stop(void);

void InitADC()
{
	ADMUX=(1<<REFS0);                         				// For Aref=AVcc;
 142:	80 e4       	ldi	r24, 0x40	; 64
 144:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS1)|(1<<ADPS0); 	//Prescalar div factor =128
 146:	83 e8       	ldi	r24, 0x83	; 131
 148:	86 b9       	out	0x06, r24	; 6
	sbi(PORTD,5);
	InitADC();
	uint16_t adc_result;
	while(1)
	{	
		adc_result=	ReadADC(0);
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 43 00 	call	0x86	; 0x86 <ReadADC>
		if(adc_result >= 750)
 150:	8e 5e       	subi	r24, 0xEE	; 238
 152:	92 40       	sbci	r25, 0x02	; 2
 154:	18 f0       	brcs	.+6      	; 0x15c <main+0x2e>
		{
			stop();
 156:	0e 94 92 00 	call	0x124	; 0x124 <stop>
 15a:	f7 cf       	rjmp	.-18     	; 0x14a <main+0x1c>
		}
		else
		{
			if(bit_is_set(PINB,4)&&bit_is_clear(PINB,2)&&bit_is_set(PINB,0))
 15c:	b4 9b       	sbis	0x16, 4	; 22
 15e:	07 c0       	rjmp	.+14     	; 0x16e <main+0x40>
 160:	b2 99       	sbic	0x16, 2	; 22
 162:	05 c0       	rjmp	.+10     	; 0x16e <main+0x40>
 164:	b0 9b       	sbis	0x16, 0	; 22
 166:	03 c0       	rjmp	.+6      	; 0x16e <main+0x40>
				forward();
 168:	0e 94 58 00 	call	0xb0	; 0xb0 <forward>
 16c:	3b c0       	rjmp	.+118    	; 0x1e4 <main+0xb6>
			else if(bit_is_clear(PINB,4)&&bit_is_clear(PINB,2)&&bit_is_set(PINB,0))
 16e:	b4 99       	sbic	0x16, 4	; 22
 170:	04 c0       	rjmp	.+8      	; 0x17a <main+0x4c>
 172:	b2 99       	sbic	0x16, 2	; 22
 174:	02 c0       	rjmp	.+4      	; 0x17a <main+0x4c>
 176:	b0 99       	sbic	0x16, 0	; 22
 178:	06 c0       	rjmp	.+12     	; 0x186 <main+0x58>
				left();
			else if(bit_is_clear(PINB,4)&&bit_is_set(PINB,2)&&bit_is_set(PINB,0))
 17a:	b4 99       	sbic	0x16, 4	; 22
 17c:	07 c0       	rjmp	.+14     	; 0x18c <main+0x5e>
 17e:	b2 9b       	sbis	0x16, 2	; 22
 180:	05 c0       	rjmp	.+10     	; 0x18c <main+0x5e>
 182:	b0 9b       	sbis	0x16, 0	; 22
 184:	03 c0       	rjmp	.+6      	; 0x18c <main+0x5e>
				left();
 186:	0e 94 83 00 	call	0x106	; 0x106 <left>
 18a:	2c c0       	rjmp	.+88     	; 0x1e4 <main+0xb6>
			else if(bit_is_set(PINB,4)&&bit_is_clear(PINB,2)&&bit_is_clear(PINB,0))
 18c:	b4 9b       	sbis	0x16, 4	; 22
 18e:	04 c0       	rjmp	.+8      	; 0x198 <main+0x6a>
 190:	b2 99       	sbic	0x16, 2	; 22
 192:	02 c0       	rjmp	.+4      	; 0x198 <main+0x6a>
 194:	b0 9b       	sbis	0x16, 0	; 22
 196:	06 c0       	rjmp	.+12     	; 0x1a4 <main+0x76>
				right();
			else if(bit_is_set(PINB,4)&&bit_is_set(PINB,2)&&bit_is_clear(PINB,0))	
 198:	b4 9b       	sbis	0x16, 4	; 22
 19a:	07 c0       	rjmp	.+14     	; 0x1aa <main+0x7c>
 19c:	b2 9b       	sbis	0x16, 2	; 22
 19e:	05 c0       	rjmp	.+10     	; 0x1aa <main+0x7c>
 1a0:	b0 99       	sbic	0x16, 0	; 22
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <main+0x7c>
				right();
 1a4:	0e 94 74 00 	call	0xe8	; 0xe8 <right>
 1a8:	1d c0       	rjmp	.+58     	; 0x1e4 <main+0xb6>
			else if(bit_is_clear(PINB,6)&&bit_is_clear(PINB,5)&&bit_is_clear(PINB,4)&&bit_is_clear(PINB,3)&&bit_is_clear(PINB,2)&&bit_is_clear(PINB,1)&&bit_is_clear(PINB,0))
 1aa:	b6 99       	sbic	0x16, 6	; 22
 1ac:	0f c0       	rjmp	.+30     	; 0x1cc <main+0x9e>
 1ae:	b5 99       	sbic	0x16, 5	; 22
 1b0:	0d c0       	rjmp	.+26     	; 0x1cc <main+0x9e>
 1b2:	b4 99       	sbic	0x16, 4	; 22
 1b4:	0b c0       	rjmp	.+22     	; 0x1cc <main+0x9e>
 1b6:	b3 99       	sbic	0x16, 3	; 22
 1b8:	09 c0       	rjmp	.+18     	; 0x1cc <main+0x9e>
 1ba:	b2 99       	sbic	0x16, 2	; 22
 1bc:	07 c0       	rjmp	.+14     	; 0x1cc <main+0x9e>
 1be:	b1 99       	sbic	0x16, 1	; 22
 1c0:	05 c0       	rjmp	.+10     	; 0x1cc <main+0x9e>
 1c2:	b0 99       	sbic	0x16, 0	; 22
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <main+0x9e>
			{
				forward1();
 1c6:	0e 94 5d 00 	call	0xba	; 0xba <forward1>
 1ca:	0c c0       	rjmp	.+24     	; 0x1e4 <main+0xb6>
			}
			else if(bit_is_set(PINB,4)&&bit_is_set(PINB,3)&&bit_is_set(PINB,2)&&bit_is_set(PINB,1)&&bit_is_set(PINB,0))
 1cc:	b4 9b       	sbis	0x16, 4	; 22
 1ce:	0a c0       	rjmp	.+20     	; 0x1e4 <main+0xb6>
 1d0:	b3 9b       	sbis	0x16, 3	; 22
 1d2:	08 c0       	rjmp	.+16     	; 0x1e4 <main+0xb6>
 1d4:	b2 9b       	sbis	0x16, 2	; 22
 1d6:	06 c0       	rjmp	.+12     	; 0x1e4 <main+0xb6>
 1d8:	b1 9b       	sbis	0x16, 1	; 22
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <main+0xb6>
 1dc:	b0 9b       	sbis	0x16, 0	; 22
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <main+0xb6>
				backward();
 1e0:	0e 94 4f 00 	call	0x9e	; 0x9e <backward>
			//else
			//{
				//backward();
			//}
			PORTA=count;
 1e4:	80 91 60 00 	lds	r24, 0x0060
 1e8:	8b bb       	out	0x1b, r24	; 27
 1ea:	af cf       	rjmp	.-162    	; 0x14a <main+0x1c>

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
